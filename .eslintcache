[{"/Users/carlymalatskey/Desktop/Code/pet-all/src/index.js":"1","/Users/carlymalatskey/Desktop/Code/pet-all/src/App.js":"2","/Users/carlymalatskey/Desktop/Code/pet-all/src/reportWebVitals.js":"3","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/HomePage.js":"4","/Users/carlymalatskey/Desktop/Code/pet-all/src/api.js":"5","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/PetDetails/PetDetailsPage.js":"6","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/MyPetsPage.js":"7","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/AppNavigation/AppNavigation.js":"8","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/ProfileSettings/ProfileSettingsPage.js":"9","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/LoggedInHome/LoggedInHome.js":"10","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/SearchPage.js":"11","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/NotLoggedInHome.js":"12","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/AddPetForm.js":"13","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/Dashboard/Dashboard.js":"14","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/EditPetForm/EditPetForm.js":"15","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/PetDetails/PetDetailsText.js":"16","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/modals/SignUpModal/SignUpModal.js":"17","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/modals/LoginModal/LoginModal.js":"18","/Users/carlymalatskey/Desktop/Code/pet-all/src/consts.js":"19","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/Dashboard/UserCard.js":"20","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/BasicSearch.js":"21","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/OwnedPets/OwnedPets.js":"22","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/AdvancedSearch.js":"23","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/SavedPets/SavedPets.js":"24","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/shared/PetCard.js":"25"},{"size":500,"mtime":1610056605526,"results":"26","hashOfConfig":"27"},{"size":214,"mtime":1610056605337,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":1610056605527,"results":"29","hashOfConfig":"27"},{"size":5758,"mtime":1610056605503,"results":"30","hashOfConfig":"27"},{"size":2308,"mtime":1610100135939,"results":"31","hashOfConfig":"27"},{"size":6565,"mtime":1610056605517,"results":"32","hashOfConfig":"27"},{"size":2527,"mtime":1610056605514,"results":"33","hashOfConfig":"27"},{"size":3598,"mtime":1610056605501,"results":"34","hashOfConfig":"27"},{"size":4366,"mtime":1610056605520,"results":"35","hashOfConfig":"27"},{"size":791,"mtime":1610056605505,"results":"36","hashOfConfig":"27"},{"size":2355,"mtime":1610056605523,"results":"37","hashOfConfig":"27"},{"size":2261,"mtime":1610056605508,"results":"38","hashOfConfig":"27"},{"size":9372,"mtime":1610056605494,"results":"39","hashOfConfig":"27"},{"size":870,"mtime":1610056605495,"results":"40","hashOfConfig":"27"},{"size":9805,"mtime":1610056605499,"results":"41","hashOfConfig":"27"},{"size":2924,"mtime":1610056605519,"results":"42","hashOfConfig":"27"},{"size":4311,"mtime":1610056605511,"results":"43","hashOfConfig":"27"},{"size":2179,"mtime":1610056605509,"results":"44","hashOfConfig":"27"},{"size":946,"mtime":1610056605525,"results":"45","hashOfConfig":"27"},{"size":2339,"mtime":1610056605496,"results":"46","hashOfConfig":"27"},{"size":2252,"mtime":1610056605522,"results":"47","hashOfConfig":"27"},{"size":1965,"mtime":1610056605516,"results":"48","hashOfConfig":"27"},{"size":5723,"mtime":1610056605521,"results":"49","hashOfConfig":"27"},{"size":1900,"mtime":1610056605516,"results":"50","hashOfConfig":"27"},{"size":2468,"mtime":1610056605524,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1fx5hri",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"54"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"54"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"54"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/Users/carlymalatskey/Desktop/Code/pet-all/src/index.js",[],["119","120"],"/Users/carlymalatskey/Desktop/Code/pet-all/src/App.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/reportWebVitals.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/HomePage.js",["121"],"import React, { Component } from \"react\";\nimport \"./HomePage.css\";\nimport PetDetailsPage from \"./../../components/PetDetails/PetDetailsPage\";\nimport MyPetsPage from \"./../MyPetsPage/MyPetsPage\";\nimport AppNavigation from \"../AppNavigation/AppNavigation\";\nimport ProfileSettingsPage from \"./../../components/ProfileSettings/ProfileSettingsPage\";\nimport SearchPage from \"./../../components/SearchPage/SearchPage\";\nimport {} from \"react-router-dom\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect\n} from \"react-router-dom\";\nimport NotLoggedInHome from \"./NotLoggedInHome/NotLoggedInHome\";\nimport LoggedInHome from \"./LoggedInHome/LoggedInHome\";\nimport Cookies from \"universal-cookie\";\nimport api from \"../../api\";\nimport AddPetForm from \"./../Admin/AddPetForm\";\nimport EditPetForm from \"./../Admin/EditPetForm/EditPetForm\"\nimport Dashboard from \"../Admin/Dashboard/Dashboard\";\n\nconst cookies = new Cookies();\n\nclass HomePage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { //TODO: consider what to do with user\n      isSignedIn: false,\n      user: undefined\n    };\n  }\n\n  async componentDidMount() {\n    let userId = cookies.get('petAdoptionUserId');\n    let user = await api.user.getUserDetails(userId);\n    if (userId) {\n      this.setState({\n        isSignedIn: true,\n        user: user.data.user\n      })\n    }\n  }\n\n  handleUpdateUserProfile = async (updatedUser) => {\n    try {\n      let response = await api.user.updateUser(updatedUser); \n      if (response.data.status === \"success\") {\n        alert(\"Successfully updated profile\");\n        this.setState({\n          user: response.data.updatedUser,\n          isSignedIn: true\n        }); \n    } else {\n      alert(\"Unable to update profile\");\n    }\n  } catch (error) {\n    alert(\"Error in updating profile: \" + error);\n  }\n}\n\n  handleSignUp = async (newUser) => {\n    try{\n      let response = await api.authentication.signUp(newUser);\n      if (response.data.status === \"success\") {\n        alert(\"Successfully signed up\");\n        this.setState({\n          user: response.data.user,\n          isSignedIn: true\n        }); \n      } else {\n        alert(response.data.error.message);\n      }\n    } catch (error) {\n      alert(\"Error in signing up: \" + error);\n    } \n  }\n\n  handleLoggedIn = async () => {\n    let userId = cookies.get('petAdoptionUserId');\n    if (userId) {\n      let user = await api.user.getUserDetails(userId);\n      this.setState({\n        user: user.data.user,\n        isSignedIn: true\n      })\n    }\n  }\n\n  handleSignOut = async () => {\n    try {\n      let response = await api.authentication.signOut(); \n      if (response.data.status === \"success\") {\n        alert(\"Successfully signed out\");\n        this.setState({\n          user: undefined,\n          isSignedIn: false\n        });\n      } else {\n        alert(\"Unable to sign out\");\n      }\n    } catch (error) {\n      alert(\"Error in signing out: \" + error)\n    }\n  }\n\n  handleAddPet = async (newPet, picture) => {\n    try {\n      let data = new FormData()\n      data.append('file', picture);\n      Object.keys(newPet).forEach(key => {\n        data.append(key, newPet[key]);\n      })\n      let response = await api.admin.addPet(data);\n      if (response.data.status === \"success\") {\n        alert(\"Successfully added a pet\");\n        this.setState({\n          pet: response.data.pet,\n        }); \n      } else {\n        alert(\"Unable to add pet\");\n      }\n    } catch (error) {\n      alert(\"Error in adding a pet: \" + error);\n    } \n  }\n\n  handleUpdatedPet = async (updatedPet) => {\n    try {\n      let response = await api.pet.updatePet(updatedPet); \n      if (response.data.status === \"success\") {\n        alert(\"Successfully updated profile\");\n        this.setState({\n          pet: response.data.updatedPet,\n          isSignedIn: true\n        }); \n      } else {\n        alert(\"Unable to update profile\");\n      }\n    } catch (error) {\n      alert(\"Error in updating profile: \" + error);\n    }\n  }\n\n  render() {\n    return (\n      <Router>\n        <AppNavigation isSignedIn={this.state.isSignedIn} user={this.state.user} signOut={() => this.handleSignOut()}/>\n        <div className=\"website-section\">\n          <Switch>\n            <Route exact path=\"/\">\n              <Redirect to=\"/home\" />\n            </Route>\n            <Route exact path=\"/home\" render={props => this.state.isSignedIn ? <LoggedInHome {...props} user={this.state.user}/> : <NotLoggedInHome {...props} signedUp={(newUser) => this.handleSignUp(newUser)} loggedIn={() => this.handleLoggedIn()}/>}/>\n            <Route path=\"/search\">\n              <SearchPage user={this.state.user} />\n            </Route>\n            <Route path=\"/profile-settings\">\n              <ProfileSettingsPage user={this.state.user} handleUpdateUserProfile={this.handleUpdateUserProfile}></ProfileSettingsPage>\n            </Route>\n            <Route path=\"/mypets\" render={props => this.state.isSignedIn ? <MyPetsPage {...props} user={this.state.user}/> : <NotLoggedInHome {...props} signedUp={(newUser) => this.handleSignUp(newUser)} loggedIn={() => this.handleLoggedIn()}/>}/>\n            <Route path=\"/petpage/:id\" render={(props) => <PetDetailsPage {...props} user={this.state.user} editPet={() => this.handleEditPet()}/>}/>\n            <Route path=\"/add-pet\">\n              <AddPetForm user={this.state.user} handleAddPet={(newPet, picture) => this.handleAddPet(newPet, picture)}/>\n            </Route>\n            <Route path=\"/dashboard\">\n              <Dashboard user={this.state.user} />\n            </Route>\n            <Route path=\"/editPet/:id\" render={(props) => <EditPetForm {...props}/>}>\n            </Route>\n          </Switch> \n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default HomePage;\n","/Users/carlymalatskey/Desktop/Code/pet-all/src/api.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/PetDetails/PetDetailsPage.js",["122","123","124","125","126","127","128"],"import React from \"react\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./PetDetailsPage.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircle, faHeart } from '@fortawesome/free-solid-svg-icons';\nimport { Link } from \"react-router-dom\";\nimport api from \"./../../api\";\nimport { alignPropType } from \"react-bootstrap/esm/DropdownMenu\";\nimport PetDetailsText from \"./PetDetailsText.js\";\n\nclass PetDetailsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pet: undefined,\n            isLoading: false,\n            savedPets: []\n        }\n    }\n\n    async componentDidMount() {\n        let petId = this.props.match.params.id;\n        this.setState({\n            isLoading: !this.state.isLoading,\n        });\n        let response = await api.pet.getPetById(petId);\n        this.setState({\n            pet: response.data.currentPet,\n            isLoading: !this.state.isLoading\n        })\n    }\n\n    async handleAdopt() {\n        let petId = this.props.match.params.id;\n        let response = await api.pet.adopt(petId);\n        if (response.data.status == \"success\") {\n            alert(`CONGRATS! ${this.state.pet.name} has been adopted!`);\n            window.location.reload();\n        } else {\n            alert(`Error: ${response.data.message}`);\n        }\n    }\n\n    async handleFoster() {\n        let petId = this.props.match.params.id; \n        let response = await api.pet.foster(petId);\n        if (response.data.status == \"success\") {\n            alert(`CONGRATS! ${this.state.pet.name} has been fostered!`);\n            window.location.reload();\n        } else {\n            alert(`Error occurred: ${response.data.message}`);\n        }\n    }\n\n    async handleSave() {\n        let petId = this.props.match.params.id; \n        let response = await api.pet.save(petId);\n        if (response.data.status == \"success\") {\n            alert(`${this.state.pet.name} has been added to your favorites!`);\n            window.location.reload();\n        } else {\n            alert(`Error: ${response.data.message}`);\n        }\n    }\n\n    async handleRemovedSavedPet() {\n        let petId = this.props.match.params.id; \n        let response = await api.pet.removedSavedPet(petId);\n        if (response.data.status == \"success\") {\n            alert(`${this.state.pet.name} has been removed from your favorites.`);\n            window.location.reload();\n        } else {\n            alert(`Error: ${response.data.message}`);\n        }\n    }\n\n    async handleReturn() {\n        let petId = this.props.match.params.id; \n        let response = await api.pet.return(petId);\n        if (response.data.status == \"success\") {\n            alert(`${this.state.pet.name} has been returned.`);\n            window.location.reload();\n        } else {\n            alert(`Error occurred: ${response.data.message}`);\n        }\n    }\n\n    isPetSaved() {\n        let petId = this.props.match.params.id; \n        return this.props.user.savedPets.includes(petId);\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.pet && this.props.user &&\n                    <div>\n                        <div>\n                            <Image className=\"pet-image-heading\" src={this.state.pet.picture}></Image>\n                        </div>\n                        <div className=\"under-picture-section\">\n                            <PetDetailsText pet={this.state.pet}></PetDetailsText>\n                            <div>\n                            \n                                <div>\n                                    {this.props.user.isAdmin ? \n                                        <Link pet={this.state.pet} to={`/editPet/${this.state.pet.id}`} className=\"action-button-style edit-pet\">Edit Pet Information</Link> : <div></div>}\n                                </div>\n                                <div className=\"action-buttons-section\">\n                                    <div className=\"action-buttons\">\n                                        {this.isPetSaved() ? \n\n                                            <Button variant=\"primary\" type=\"submit\" className=\"action-button-style\" onClick={() => this.handleRemovedSavedPet()}><FontAwesomeIcon className=\"heart-icon\" icon={faHeart}/> Unfavorite Me :(</Button>\n                                        :\n                                            <Button variant=\"primary\" type=\"submit\" className=\"action-button-style\" onClick={() => this.handleSave()}><FontAwesomeIcon className=\"heart-icon\" icon={faHeart}/> Favorite Me!</Button>\n                                        }\n                                    {this.state.pet.adoptionStatus.toLowerCase() === \"adopted\" || this.state.pet.adoptionStatus.toLowerCase() === \"fostered\" ?\n                                        <div>\n                                            <Button variant=\"primary\" type=\"submit\" className=\"action-button-style\" onClick={() => this.handleReturn()}>Return Me</Button>\n                                        </div>\n                                        :\n                                        <div>\n                                            {this.state.pet.adoptionStatus.toLowerCase() === \"available\" ?  \n                                                <div>\n                                                    <Button variant=\"primary\" type=\"submit\" className=\"action-button-style\" onClick={() => this.handleFoster()}>Foster Me</Button>\n                                                    <Button variant=\"primary\" type=\"submit\" className=\"action-button-style\" onClick={() => this.handleAdopt()}>Adopt Me</Button>\n                                                </div>\n                                            : \n                                                <div>\n                                                    This pet is not available for adoption or fostering. Either: \n                                                    <Link to=\"/search\" onClick={() => this.handleUpdatedPet()}> Find more pets</Link>\n                                                </div>\n                                            }\n                                        </div>\n                                    }\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default PetDetailsPage; ","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/MyPetsPage.js",["129","130"],"import React from \"react\";\nimport \"./../MyPetsPage/MyPetsPage.css\";\nimport SavedPets from \"./SavedPets/SavedPets\";\nimport OwnedPets from \"./OwnedPets/OwnedPets\";\nimport Button from \"react-bootstrap/esm/Button\";\nimport api from \"./../../api\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ToggleButton from 'react-bootstrap/ToggleButton'\n\nclass MyPetsPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ownedPets: {\n                fosteredPets: [],\n                adoptedPets: []\n            },\n            savedPets: [],\n            showSaved: true,\n            finishedLoadingInfo: false,\n            context: \"favorites\"\n        }\n    }\n\n    async componentDidMount() {\n        let userId = this.props.user.id; \n        let response = await api.user.getPets(userId);\n        this.setState({\n            ownedPets: {\n                fosteredPets: response.data.fosteredPets,\n                adoptedPets: response.data.adoptedPets\n            },\n            savedPets: response.data.savedPets,\n            finishedLoadingInfo: true\n        })\n    }\n\n    handleContextChange = (e) => {\n        let newContext = e.target.value;\n        this.setState({\n            context: newContext\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.finishedLoadingInfo && \n                    <div>\n                        <Button\n                            type=\"submit\"\n                            onClick={(e) => this.setState({context: \"favorites\"})}\n                            className={this.state.context === \"favorites\" ? \"selected-btn\" : \"unselected-buttons\"}\n                        >Favorite Pets</Button>\n                        <Button\n                            type=\"submit\"\n                            onClick={(e) => this.setState({context: \"ownedpets\"})} \n                            className={this.state.context !== \"favorites\" ? \"selected-btn\" : \"unselected-buttons\"}\n                        >Owned Pets</Button>\n                        {this.state.context === 'favorites' ? \n                            <SavedPets savedPets={this.state.savedPets} user={this.props.user}/>\n                            :\n                            <OwnedPets fosteredPets={this.state.ownedPets.fosteredPets} adoptedPets={this.state.ownedPets.adoptedPets} user={this.props.user}/>\n                        }\n                    </div>\n                }\n        </div>\n        )\n    }\n}\n\nexport default MyPetsPage; ","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/AppNavigation/AppNavigation.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/ProfileSettings/ProfileSettingsPage.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/LoggedInHome/LoggedInHome.js",["131"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass LoggedInHome extends React.Component {\n    constructor(props) { \n        super(props);\n    }\n\n    render() {\n        return(\n            <div>\n                <h2 className=\"homepage-header\">{`Welcome to PetAdopt ${this.props.user.displayName}!`}</h2>\n                <div>              \n                    <h4 className=\"homepage-about-text\">At PetAdopt, we provide incredible homes for our furry friends,\n                        who are just looking for a loving and warm environment where\n                        they feel safe and secure.\n                    </h4>\n                </div>\n                <Link to=\"/mypets\"> View My Pets</Link>\n            </div>\n        );\n    }\n}\n\nexport default LoggedInHome;","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/SearchPage.js",["132"],"import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./SearchPage.css\"\nimport BasicSearch from \"./BasicSearch\"\nimport AdvancedSearch from \"./AdvancedSearch\";\nimport PetCard from \"../shared/PetCard\";\n\nclass SearchPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '', // TODO: rename to searchInput\n      isBasicChecked: false,\n      isAdvancedChecked: false,\n      petsFound: []\n    }\n    this.handleBasicCheckBox = this.handleBasicCheckBox.bind(this);\n    this.handleAdvancedCheckBox = this.handleAdvancedCheckBox.bind(this);\n  }\n\n  handleBasicCheckBox() {\n    this.setState({\n      isBasicChecked: !this.state.isBasicChecked,\n      isAdvancedChecked: this.state.isBasicChecked ? this.state.isAdvancedChecked : false\n    });\n  }\n\n  handleAdvancedCheckBox() {\n    this.setState({\n      isAdvancedChecked: !this.isAdvancedChecked,\n      isBasicChecked: this.state.isAdvancedChecked ? this.state.isBasicChecked : false\n    });\n  }\n  \n  handlePetsFound(petsFound) {\n    this.setState({\n      petsFound\n    })\n  }\n\n  render() {\n    return (\n      <div>\n          <div className=\"search-overall-section\">\n          <p>Find your Furry Friend</p>\n          <Form className=\"search-input-section\">            \n              <Form.Group controlId=\"formBasicCheckbox\" className=\"search-page-checkboxes\">\n                <Form.Check type=\"checkbox\" label=\"Basic Search\"  checked={this.state.isBasicChecked} onChange={this.handleBasicCheckBox}/>\n                <Form.Check type=\"checkbox\" label=\"Advanced Search\" checked={this.state.isAdvancedChecked} onChange={this.handleAdvancedCheckBox}/>\n              </Form.Group>\n          </Form>\n          {this.state.isBasicChecked && \n            <BasicSearch handlePetsFound={(petsFound) => this.handlePetsFound(petsFound)}/>\n          }\n          {this.state.isAdvancedChecked && \n            <AdvancedSearch handlePetsFound={(petsFound) => this.handlePetsFound(petsFound)}/>\n          }\n          Pets Found: {this.state.petsFound.length}\n        </div>\n        <div className=\"pet-cards-results-section\">\n          {this.state.petsFound.map(pet => {\n            return <PetCard pet={pet} user={this.props.user}/>\n          })}\n        </div>\n      </div>\n    );\n  }\n}\nexport default SearchPage;\n","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/NotLoggedInHome.js",["133"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport SignUpModal from \"./modals/SignUpModal/SignUpModal.js\";\nimport LoginModal from \"./modals/LoginModal/LoginModal.js\";\nimport { Link } from \"react-router-dom\";\nimport \"./../NotLoggedInHome/NotLoggedInHome.css\";\n\nclass NotLoggedInHome extends React.Component {\n    constructor(props) { \n        super(props);\n        this.state = { \n            showSignUpModal: false,\n            showLoginModal: false,\n        }\n    }\n\n    handleSignUpModal = () => {\n        this.setState({\n            showSignUpModal: true,\n        });\n    };\n\n    handleLoginModal = () => {\n        this.setState({\n            showLoginModal: true,\n        });\n    };\n    \n    handleCloseModals = () => {\n        this.setState({\n            showSignUpModal: false,\n            showLoginModal: false,\n        });\n    };\n\n    handleLoggedIn() {\n        this.handleCloseModals();\n        this.props.loggedIn();\n    }\n\n    handleSignedUp(newUser) {\n        //TODO: notify the parent\n        this.props.signedUp(newUser); \n    }\n\n    render() {\n        return(\n            <div>\n                <h2 className=\"homepage-header\">{`Welcome to PetAdopt!`}</h2>\n                    <div>              \n                        <h4 className=\"homepage-about-text\">At PetAdopt, we provide incredible homes for our furry friends,\n                            who are just looking for a loving and warm environment where\n                            they feel safe and secure.\n                        </h4>\n                    <div className=\"homepage-buttons-section\">\n                        <Button onClick={this.handleSignUpModal}>Join Now and Adopt a Pet Today!</Button>\n                        <Button onClick={this.handleLoginModal}>Login</Button>\n                    </div>\n                </div>\n                <SignUpModal\n                    showModal={this.state.showSignUpModal}\n                    handleSignedUp={(newUser) => this.handleSignedUp(newUser)}\n                />\n                <LoginModal\n                    showModal={this.state.showLoginModal}\n                    handleLoggedIn={() => this.handleLoggedIn()}\n                />\n            </div>\n        );\n    }\n}\n\nexport default NotLoggedInHome;","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/AddPetForm.js",["134"],"import React from \"react\"; \nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./AddPetForm.css\"\nimport constants from \"./../../consts\";\nimport api from \"./../../api\";\n\nclass AddPetForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newPet: {\n            },\n            picture: undefined,\n            isHypoallergenicChecked: true\n        }\n    }\n\n    onInputChange(event, type) {\n        switch(type) {\n            case constants.animalInputTypes.TYPE_OF_PET: \n              this.setState({\n                  newPet: {\n                    ...this.state.newPet,\n                    type: event.target.value\n                  }\n                })\n                break;\n            case constants.animalInputTypes.NAME: \n              this.setState({\n                  newPet: {\n                  ...this.state.newPet,\n                  name: event.target.value\n                  }\n              })\n              break;\n            case constants.animalInputTypes.COLOR: \n              this.setState({\n                  newPet: {\n                  ...this.state.newPet,\n                  color: event.target.value\n                  }\n              })\n              break;\n            case constants.animalInputTypes.BREED:\n              this.setState({\n                newPet: {\n                  ...this.state.newPet,\n                  breed: event.target.value\n                }\n              })\n              break;\n            case constants.animalInputTypes.HEIGHT:\n              this.setState({\n                newPet: {\n                  ...this.state.newPet,\n                  height: event.target.value\n                }\n              })\n              break;\n            case constants.animalInputTypes.WEIGHT:\n              this.setState({\n                newPet: {\n                  ...this.state.newPet,\n                  weight: event.target.value\n                }\n              })\n              break;\n            case constants.animalInputTypes.ADOPTION_STATUS:\n              this.setState({\n                  newPet: {\n                    ...this.state.newPet,\n                    adoptionStatus: event.target.value\n                  }\n              })\n              break;\n            case constants.animalInputTypes.NAME:\n                this.setState({\n                    newPet: {\n                      ...this.state.newPet,\n                      color: event.target.value\n                    }\n                });\n              break;\n            case constants.animalInputTypes.BIO:\n                this.setState({\n                    newPet: {\n                    ...this.state.newPet,\n                    bio: event.target.value\n                    }\n                });\n              break;\n            case constants.animalInputTypes.DIET_RESTRICTIONS:\n                this.setState({\n                    newPet: {\n                    ...this.state.newPet,\n                    dietRest: event.target.value\n                    }\n                });\n              break;\n            default:\n              break;\n          }\n        }\n\n      handleAddPetSubmit = async (event) => {\n        event.preventDefault(); \n          try {\n            let data = new FormData()\n            data.append('file', this.state.picture);\n            Object.keys(this.state.newPet).forEach(key => {\n              data.append(key, this.state.newPet[key]);\n            })\n            let response = await api.admin.addPet(data);\n            if (response.data.status === \"success\") {\n              alert(\"Successfully added a pet\");\n              this.setState({\n                pet: response.data.pet,\n              }); \n            } else {\n              alert(\"Unable to add pet\");\n            }\n          } catch (error) {\n            alert(\"Error in adding a pet: \" + error);\n          } \n        }\n      \n       onFileChange(event) {\n        this.setState({\n            picture: event.target.files[0]\n        });\n      }\n\n      handleisHypoAllergenicInput(event, type) {\n        if(event.currentTarget.checked) {\n          this.setState({\n            newPet: {\n              ...this.state.newPet, \n              isHypoallergenic: type \n            },\n          })\n        }\n      }\n\n    render() {\n        return (\n            <Form className=\"form-section\">            \n            <Form.Label>Add a Pet</Form.Label>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Type of pet\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.TYPE_OF_PET)}\n                            value={this.state.newPet.type}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Breed\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.BREED)}\n                            value={this.state.newPet.breed}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Name\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.NAME)}\n                            value={this.state.newPet.name}/>\n            </Form.Group>\n            <Form.Group>\n            {/*TODO: change type to select Available/Fostered/Adopted */}\n              <Form.Control type=\"text\" \n                            placeholder=\"Adoption Status\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.ADOPTION_STATUS)}\n                            value={this.state.newPet.adoptionStatus}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"number\" \n                            placeholder=\"Height\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.HEIGHT)}\n                            value={this.state.newPet.height}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"number\" \n                            placeholder=\"Weight\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.WEIGHT)}\n                            value={this.state.newPet.weight}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Color\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.COLOR)}\n                            value={this.state.newPet.color}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Bio\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.BIO)}\n                            value={this.state.newPet.bio}/>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label className=\"sub-heading\" >Hypoallergenic?</Form.Label>\n                <Form.Check type=\"checkbox\" \n                            className=\"checkboxes\" \n                            label=\"True\" \n                            onChange={(e) => this.handleisHypoAllergenicInput(e, constants.animalInputTypes.IS_HYPOALLERGENIC_TRUE)}\n                            onClick={this.setState({isHypoallergenicCheck: !this.state.isHypoallergenicCheck})}/>\n                <Form.Check type=\"checkbox\" \n                            className=\"checkboxes\" \n                            label=\"False\" \n                            onChange={(e) => this.handleisHypoAllergenicInput(e, constants.animalInputTypes.IS_HYPOALLERGENIC_FALSE)}\n                            onClick={this.setState({isHypoallergenicCheck: !this.state.isHypoallergenicCheck})}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Diet Restrictions\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.DIET_RESTRICTIONS)}\n                            value={this.state.newPet.dietRest}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"file\" \n                            placeholder=\"Image\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onFileChange(event)}\n                            />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\" className=\"add-pet-button\" onClick = {(event) => this.handleAddPetSubmit(event)}>\n              Add a pet\n            </Button>\n          </Form>\n        )\n    }\n}\n\n\nexport default AddPetForm; ","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/Dashboard/Dashboard.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/EditPetForm/EditPetForm.js",["135","136"],"import React from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport api from \"./../../../api\";\nimport constants from \"./../../../consts\";\nimport \"./EditPetForm.css\"\n\nclass EditPetForm extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            updatedPet: {},\n            updatePicture: undefined\n        }\n    }\n\n\n    async componentDidMount() {\n        let petId = this.props.match.params.id;\n        let response = await api.pet.getPetById(petId);\n        this.setState({\n            updatedPet: response.data.currentPet,\n        })\n    }\n\n    onInputChange(event, type) {\n        switch(type) {\n            case constants.animalInputTypes.TYPE_OF_PET: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        type: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.BREED: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        breed: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.NAME: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        name: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.ADOPTION_STATUS: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        adoptionStatus: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.COLOR: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        color: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.HEIGHT: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        height: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.WEIGHT: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        weight: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.DIET_RESTRICTIONS: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        dietRest: event.target.value\n                    }\n                })\n                break;\n            case constants.animalInputTypes.BIO: \n                this.setState({\n                    updatedPet: {\n                        ...this.state.updatedPet,\n                        bio: event.target.value\n                    }\n                })\n                break;\n        }\n    }\n\n    onFileChange(event) {\n        this.setState({\n            updatedPicture: event.target.files[0]\n        })\n    }\n\n    handleUpdatedPet = async (event) => {\n        event.preventDefault(); \n        try {\n            let data = new FormData()\n            if (this.state.updatedPicture) {\n                data.append('file', this.state.updatedPicture);\n            }\n            Object.keys(this.state.updatedPet).forEach(key => {\n                data.append(key, this.state.updatedPet[key]);\n            })\n            let response = await api.pet.updatePet(data); \n            if (response.data.status === \"success\") {\n            alert(\"Successfully updated pet profile\");\n            this.setState({\n                updatedPet: response.data.updatedPet,\n            }); \n            } else {\n            alert(\"Unable to update pet profile\");\n            }\n        } catch (error) {\n            alert(\"Error in updating profile: \" + error);\n        }\n    }\n\n    handleisHypoAllergenicInput(event, type) {\n        if(event.currentTarget.checked) {\n          this.setState({\n            updatedPet: {\n              ...this.state.updatedPet, \n              isHypoallergenic: type \n            }\n          })\n        } \n      }\n \n    render() {\n        return(\n            <Form className=\"form-section\">            \n            <Form.Label>Edit Pet</Form.Label>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Type of pet\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.TYPE_OF_PET)}\n                            value={this.state.updatedPet.type}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Breed\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.BREED)}\n                            value={this.state.updatedPet.breed}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Name\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.NAME)}\n                            value={this.state.updatedPet.name}/>\n            </Form.Group>\n            <Form.Group>\n            {/*TODO: change type to select Available/Fostered/Adopted */}\n              <Form.Control type=\"text\" \n                            placeholder=\"Adoption Status\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.ADOPTION_STATUS)}\n                            value={this.state.updatedPet.adoptionStatus}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"number\" \n                            placeholder=\"Height\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.HEIGHT)}\n                            value={this.state.updatedPet.height}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"number\" \n                            placeholder=\"Weight\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.WEIGHT)}\n                            value={this.state.updatedPet.weight}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Color\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.COLOR)}\n                            value={this.state.updatedPet.color}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Bio\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.BIO)}\n                            value={this.state.updatedPet.bio}/>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label className=\"sub-heading\" >Hypoallergenic?</Form.Label>\n                <Form.Check type=\"checkbox\" className=\"checkboxes\" label=\"True\" onChange={(e) => this.handleisHypoAllergenicInput(e, constants.animalInputTypes.IS_HYPOALLERGENIC_TRUE)}/>\n                <Form.Check type=\"checkbox\" className=\"checkboxes\" label=\"False\" onChange={(e) => this.handleisHypoAllergenicInput(e, constants.animalInputTypes.IS_HYPOALLERGENIC_FALSE)}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"text\" \n                            placeholder=\"Diet Restrictions\" \n                            className=\"pet-info-section\" \n                            onChange={(event) => this.onInputChange(event, constants.animalInputTypes.DIET_RESTRICTIONS)}\n                            value={this.state.updatedPet.dietRest}/>\n            </Form.Group>\n            {/* <Form.Group>\n                <Form.Label className=\"sub-heading\" >Change Picture?</Form.Label>\n                <Form.Check type=\"checkbox\" className=\"checkboxes\" label=\"Yes\" onChange={(e) => this.handleChangePictureInput(e, constants.animalInputTypes.CHANGE_PICTURE_TRUE)}/>\n                <Form.Check type=\"checkbox\" className=\"checkboxes\" label=\"No\" onChange={(e) => this.handleChangePictureInput(e, constants.animalInputTypes.CHANGE_PICTURE_FALSE)}/>\n            </Form.Group> */}\n\n            <div>\n                <img src={this.state.updatedPet.picture} style={{width: \"50%\"}}/>\n                <Form.Group>\n                <Form.Control type=\"file\" \n                                placeholder=\"Image\" \n                                className=\"pet-info-section\" \n                                onChange={(event) => this.onFileChange(event)}/>\n                </Form.Group>\n            </div>\n\n            <Button variant=\"primary\" type=\"submit\" className=\"add-pet-button\" onClick = {(event) => this.handleUpdatedPet(event)}>\n              Save Pet\n            </Button>\n          </Form>\n        )\n    }\n}\n\nexport default EditPetForm;","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/PetDetails/PetDetailsText.js",["137"],"import React from \"react\"; \nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircle } from '@fortawesome/free-solid-svg-icons';\nimport \"./PetDetailsText.css\";\n\nclass PetDetailsText extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div className=\"about-pet-section\">\n                <h2 className=\"pet-name-heading\">{this.props.pet.name}</h2>\n                <div className =\"pet-subsection-details\">{this.props.pet.adoptionStatus} <FontAwesomeIcon className=\"pet-card-dot\" icon={faCircle}/> {this.props.pet.type} <FontAwesomeIcon className=\"pet-card-dot\" icon={faCircle}/> {this.props.pet.breed}</div>\n                <div className=\"about-me-section\">\n                    <h2>About Me</h2>\n                    <div> \n                        <h4 className=\"about-subheadings\">Size</h4>\n                        <p className=\"about-subheadings-answers\"> I weigh {this.props.pet.weight} pounds and I am {this.props.pet.height} inches tall!</p>\n                    </div>\n                    {this.props.pet.isHypoallergenic ? \n                        <div> \n                            <h4 className=\"about-subheadings diet-rest\">Hypoallergenic: </h4>\n                            <p className=\"about-subheadings-answers diet-rest\"> Yes </p>\n                        </div>\n                        :\n                        <div> \n                            <h4 className=\"about-subheadings diet-rest\">Hypoallergenic: </h4>\n                            <p className=\"about-subheadings-answers diet-rest\"> No </p>\n                        </div>\n                    }\n                \n                    <div> \n                        <h4 className=\"about-subheadings color\">Color:</h4>\n                        <p className=\"about-subheadings-answers color\"> {this.props.pet.color}</p>\n                    </div>\n                    {this.props.pet.dietRest.length > 0 ?\n                        <div> \n                            <h4 className=\"about-subheadings diet-rest\">Dietary Restrictions: </h4>\n                            <p className=\"about-subheadings-answers diet-rest\"> {this.props.pet.dietRest}</p>\n                        </div>\n                        :\n                        <div> \n                            <h4 className=\"about-subheadings diet-rest\">Dietary Restrictions: </h4>\n                            <p className=\"about-subheadings-answers diet-rest\"> None </p>\n                        </div>\n                    }\n                </div>\n                <div className=\"meet-me-section\">\n                    <h2>Meet Me</h2>\n                    <div className=\"meet-me-section-criteria\"> \n                        <p className=\"meet-me-subheadings-answers\"> {this.props.pet.bio}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default PetDetailsText;","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/modals/SignUpModal/SignUpModal.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Home/NotLoggedInHome/modals/LoginModal/LoginModal.js",["138"],"import React from \"react\";\nimport Modal from \"react-modal\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./../Modal.css\";\nimport api from \"../../../../../api\";\n\nclass LoginModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        email: '',\n        password: ''\n    }\n  }\n\n  componentDidMount() {\n    Modal.setAppElement('body'); \n  }\n\n\n  onInputChange(event, type) {\n      switch(type) {\n        case \"email\":\n          this.setState({\n            email: event.target.value\n          }\n        )\n        break;\n        case \"password\":\n          this.setState({\n              password: event.target.value\n            }\n          )\n          break;\n      }\n  }\n\n  async handleLogin(event) {\n    event.preventDefault();\n    let response = await api.authentication.login(this.state.email, this.state.password);\n    if (response.data.status === \"success\") {\n      this.props.handleLoggedIn(); \n    } else {\n      alert(\"bad credentials, try again\");\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Modal isOpen={this.props.showModal} portalClassName=\"modal\">\n          <Form>\n            <Form.Label>Sign In</Form.Label>\n            <Form.Group>\n              <Form.Control type=\"email\" \n                            placeholder=\"Enter Email\" \n                            className=\"entry-info-section\"\n                            onChange={(event) => this.onInputChange(event, \"email\")}\n                            value={this.state.email}/>\n            </Form.Group>\n            <Form.Group>\n              <Form.Control type=\"password\" \n                            placeholder=\"Enter Password\" \n                            className=\"entry-info-section\"\n                            onChange={(event) => this.onInputChange(event, \"password\")}\n                            value={this.state.password}/>\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\" className=\"entry-button\" onClick={(event) => this.handleLogin(event)}>\n              Login\n            </Button>\n          </Form>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default LoginModal;\n","/Users/carlymalatskey/Desktop/Code/pet-all/src/consts.js",["139"],"const { faMarsDouble } = require(\"@fortawesome/free-solid-svg-icons\");\n\nconst constants = {\n    userInputTypes: {\n        EMAIL: \"email\",\n        DISPLAYNAME: \"displayName\",\n        PHONE_NUMBER: \"phoneNumber\",\n        PASSWORD: \"password1\",\n        BIO: \"bio\"\n    },\n    animalTypes: {\n        DOG: \"dog\",\n        CAT: \"cat\"\n    },\n    adoptionStatusTypes: {\n        AVAILABLE: \"available\",\n        ADOPTED: \"adopted\",\n        FOSTERED: \"fostered\"\n    },\n    animalInputTypes: {\n        TYPE_OF_PET: \"type\",\n        BREED: \"breed\",\n        NAME: \"name\",\n        ADOPTION_STATUS: \"adoptionStatus\",\n        HEIGHT: \"height\",\n        WEIGHT: \"weight\",\n        COLOR: \"color\",\n        BIO: \"bio\",\n        IS_HYPOALLERGENIC_TRUE: true,\n        IS_HYPOALLERGENIC_FALSE: false,\n        DIET_RESTRICTIONS: \"dietRest\",\n        PICTURE: \"picture\",\n        CHANGE_PICTURE_TRUE: true, \n        CHANGE_PICTURE_FALSE: false\n    }\n};\n\nexport default constants;","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/Admin/Dashboard/UserCard.js",["140","141"],"import React from \"react\"; \nimport Card from \"react-bootstrap/Card\";\nimport Collapse from 'react-bootstrap/Collapse'\nimport Button from \"react-bootstrap/Button\";\nimport \"./UserCard.css\";\nimport { Link } from \"react-router-dom\";\n\nclass UserCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false\n        }\n    }\n\n    renderPets (pets) {\n        return (\n        <div>\n            {pets.length > 0 ?\n                pets.map(pet => {\n                    return <Link to={`/petpage/${pet.id}`} className=\"pet-name\">{pet.name}</Link>\n                })\n                :\n                <div>None</div>\n            }\n        </div>)\n    }\n\n    render () {\n        return (\n            <div>\n                <Card className=\"user-card\" onClick={() => this.setState({open: !this.state.open})}> \n                        <Card.Body>\n                            <Card.Title className=\"user-name\">{this.props.user.displayName}</Card.Title>\n                            <Card.Text>\n                                {`Email: ${this.props.user.email}`}\n                                {/* TODO: indicate whether admin or user */}\n                                {/* {this.props.isAdmin ? \"Admin\" : \"User\"} */}\n                            </Card.Text>  \n                    {this.state.open && \n                        <div id=\"example-collapse-text\">\n                            <div>\n                                {`Phone Number: ${this.props.user.phoneNumber}`}\n                            </div>\n                            <div>\n                                {`Adopted Pets:` }\n                                {this.renderPets(this.props.user.adoptedPets)}\n                            </div>\n                            <div>\n                                {`Fostered Pets:` }\n                                {this.renderPets(this.props.user.fosteredPets)}\n                            </div>\n                            <div>\n                                {`Saved Pets:` }\n                                {this.renderPets(this.props.user.savedPets)}\n                            </div>\n                        </div>\n                    }\n                        </Card.Body>\n                </Card>\n            </div>\n        \n        );\n    }\n}\n\n\n\nexport default UserCard; ","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/BasicSearch.js",["142","143","144"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDog, faCat } from '@fortawesome/free-solid-svg-icons';\nimport \"./../SearchPage/BasicSearch.css\"\nimport consts from \"./../../consts\";\nimport api from \"./../../api\";\n\nclass BasicSearch extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            typeToFind: \"\"\n        }\n    }\n\n    async handleSearch(event) {\n        event.preventDefault();\n        let results = await api.search.findAll('', this.state.typeToFind, '', '', '');\n        let pets = results.data.pets;\n        this.props.handlePetsFound(pets);\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"basic-search-section\">\n                    <div>\n                        <p className=\"basic-search-title\">By Animal:</p>\n                        <Button variant=\"primary\" type=\"button\" className={this.state.typeToFind == consts.animalTypes.DOG ? \"selected-button\" : \"find-by-animal-button\"} onClick={() => this.setState({typeToFind: consts.animalTypes.DOG})}>\n                            <FontAwesomeIcon className=\"animal-icon\" icon={faDog}/>\n                            Find a dog\n                        </Button>\n                        <Button variant=\"primary\" type=\"submit\" className={this.state.typeToFind == consts.animalTypes.CAT ? \"selected-button\" : \"find-by-animal-button\"} onClick={() => this.setState({typeToFind: consts.animalTypes.CAT})}>\n                            <FontAwesomeIcon className=\"animal-icon\" icon={faCat}/>\n                            Find a cat\n                        </Button>   \n                        <Button variant=\"primary\" type=\"submit\" className={this.state.typeToFind == consts.animalTypes.OTHER ? \"selected-button\" : \"other-pets-button\"} onClick={() => this.setState({typeToFind: consts.animalTypes.OTHER})}>\n                            Find Other Pets\n                        </Button>\n                    </div>\n                </div>\n                <Button className=\"basic-search-button\" onClick={(e) => this.handleSearch(e)}>Search</Button>\n            </div>\n        )\n    }\n}\n\nexport default BasicSearch; ","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/OwnedPets/OwnedPets.js",["145"],"import React from \"react\";\nimport PetCard from \"./../../shared/PetCard\";\nimport { Link } from \"react-router-dom\";\nimport api from \"./../../../api\";\n\nclass OwnedPets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ownedPets: [],\n            finishedLoadingInfo: false\n        }\n    }\n\n    async componentDidMount() {\n        let allPetsToFetch = [].concat(this.props.adoptedPets).concat(this.props.fosteredPets);\n        let promises = Promise.all(allPetsToFetch.map(petId => api.pet.getPetById(petId)));\n        promises.then(results => Promise.all(results.map(response => response.data.currentPet))).then(results => {\n            this.setState({\n                ownedPets: results,\n                finishedLoadingInfo: true\n        })})\n    }\n\n    render() {\n        return(\n            <div>\n                {!this.state.finishedLoadingInfo ? \n                    <div>WAIT! LOADING!</div>\n                    :\n                    <div>\n                        {this.state.ownedPets.length == 0 ?\n                            <div>\n                                <div>\n                                    <h1>No owned pets yet</h1>\n                                    <p>When you find a pet you love, own it!</p>\n                                </div>\n                                <div>\n                                    <Link className=\"find-a-pet-label\" to=\"/search\">Find a Pet</Link> \n                                </div>\n                            </div>\n                            :\n                            <div>\n                                {this.state.ownedPets.map(ownedPet => {\n                                    return <PetCard pet={ownedPet} user={this.props.user}/>\n                                })}\n                            </div>\n                        }\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default OwnedPets;\n","/Users/carlymalatskey/Desktop/Code/pet-all/src/components/SearchPage/AdvancedSearch.js",[],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/MyPetsPage/SavedPets/SavedPets.js",["146"],"import React from \"react\";\nimport PetCard from \"./../../shared/PetCard\";\nimport api from \"./../../../api\";\nimport { Link } from \"react-router-dom\";\n\nclass SavedPets extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            savedPets: [],\n            finishedLoadingInfo: false\n        }\n    }\n\n    async componentDidMount() {\n        let promises = Promise.all(this.props.savedPets.map(petId => api.pet.getPetById(petId)));\n        promises.then(results => Promise.all(results.map(response => response.data.currentPet))).then(results => {\n            this.setState({\n                savedPets: results,\n                finishedLoadingInfo: true\n        })})\n    }\n\n    render() {\n        return(\n            <div>\n                {!this.state.finishedLoadingInfo ? \n                    <div>WAIT! LOADING!</div>\n                    :\n                    <div>\n                        {this.state.savedPets.length == 0 ?\n                            <div>\n                                <div>\n                                    <h1>No favorites here yet</h1>\n                                    <p>When you find a pet you love, add it to you favorites list</p>\n                                </div>\n                                <div>\n                                    <Link className=\"find-a-pet-label\" to=\"/search\">Find a Pet</Link> \n                                </div>\n                            </div>\n                            :\n                            <div>\n                                {this.state.savedPets.map(savedPet => {\n                                    return <PetCard pet={savedPet} user={this.props.user}/>\n                                })}\n                            </div>\n                        }\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default SavedPets;\n",["147","148"],"/Users/carlymalatskey/Desktop/Code/pet-all/src/components/shared/PetCard.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"157","line":6,"column":10,"nodeType":"155","messageId":"156","endLine":6,"endColumn":18},{"ruleId":"153","severity":1,"message":"158","line":9,"column":10,"nodeType":"155","messageId":"156","endLine":9,"endColumn":23},{"ruleId":"159","severity":1,"message":"160","line":37,"column":34,"nodeType":"161","messageId":"162","endLine":37,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":48,"column":34,"nodeType":"161","messageId":"162","endLine":48,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":59,"column":34,"nodeType":"161","messageId":"162","endLine":59,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":70,"column":34,"nodeType":"161","messageId":"162","endLine":70,"endColumn":36},{"ruleId":"159","severity":1,"message":"160","line":81,"column":34,"nodeType":"161","messageId":"162","endLine":81,"endColumn":36},{"ruleId":"153","severity":1,"message":"163","line":7,"column":8,"nodeType":"155","messageId":"156","endLine":7,"endColumn":19},{"ruleId":"153","severity":1,"message":"164","line":8,"column":8,"nodeType":"155","messageId":"156","endLine":8,"endColumn":20},{"ruleId":"165","severity":1,"message":"166","line":5,"column":5,"nodeType":"167","messageId":"168","endLine":7,"endColumn":6},{"ruleId":"153","severity":1,"message":"169","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":14},{"ruleId":"153","severity":1,"message":"170","line":5,"column":10,"nodeType":"155","messageId":"156","endLine":5,"endColumn":14},{"ruleId":"171","severity":1,"message":"172","line":77,"column":13,"nodeType":"173","messageId":"162","endLine":84,"endColumn":21},{"ruleId":"174","severity":1,"message":"175","line":26,"column":9,"nodeType":"176","messageId":"177","endLine":99,"endColumn":10},{"ruleId":"178","severity":1,"message":"179","line":223,"column":17,"nodeType":"180","endLine":223,"endColumn":82},{"ruleId":"165","severity":1,"message":"166","line":7,"column":5,"nodeType":"167","messageId":"168","endLine":9,"endColumn":6},{"ruleId":"174","severity":1,"message":"175","line":23,"column":7,"nodeType":"176","messageId":"177","endLine":36,"endColumn":8},{"ruleId":"153","severity":1,"message":"181","line":1,"column":9,"nodeType":"155","messageId":"156","endLine":1,"endColumn":21},{"ruleId":"153","severity":1,"message":"182","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":16},{"ruleId":"153","severity":1,"message":"169","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":14},{"ruleId":"159","severity":1,"message":"160","line":30,"column":98,"nodeType":"161","messageId":"162","endLine":30,"endColumn":100},{"ruleId":"159","severity":1,"message":"160","line":34,"column":98,"nodeType":"161","messageId":"162","endLine":34,"endColumn":100},{"ruleId":"159","severity":1,"message":"160","line":38,"column":98,"nodeType":"161","messageId":"162","endLine":38,"endColumn":100},{"ruleId":"159","severity":1,"message":"160","line":32,"column":54,"nodeType":"161","messageId":"162","endLine":32,"endColumn":56},{"ruleId":"159","severity":1,"message":"160","line":31,"column":54,"nodeType":"161","messageId":"162","endLine":31,"endColumn":56},{"ruleId":"149","replacedBy":"183"},{"ruleId":"151","replacedBy":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'faCircle' is defined but never used.","'alignPropType' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ButtonGroup' is defined but never used.","'ToggleButton' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Button' is defined but never used.","'Link' is defined but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'faMarsDouble' is assigned a value but never used.","'Collapse' is defined but never used.",["185"],["186"],"no-global-assign","no-unsafe-negation"]